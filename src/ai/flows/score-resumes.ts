// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A resume scoring AI agent.
 *
 * - scoreResumes - A function that handles the resume scoring process.
 * - ScoreResumesInput - The input type for the scoreResumes function.
 * - ScoreResumesOutput - The return type for the scoreResumes function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ScoreResumesInputSchema = z.object({
  jobDescription: z
    .string()
    .describe('The job description to score the resumes against.'),
  resumeDataUris: z.array(
    z
      .string()
      .describe(
        "A list of resumes, as data URIs that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
      )
  ),
});
export type ScoreResumesInput = z.infer<typeof ScoreResumesInputSchema>;

const ScoreResumesOutputSchema = z.array(
  z.object({
    resumeDataUri: z
      .string()
      .describe(
        "The resume's data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
      ),
    score: z.number().describe('The score of the resume, from 0 to 100.'),
    reason: z.string().describe('The reason for the score.'),
  })
);
export type ScoreResumesOutput = z.infer<typeof ScoreResumesOutputSchema>;

export async function scoreResumes(input: ScoreResumesInput): Promise<ScoreResumesOutput> {
  return scoreResumesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'scoreResumesPrompt',
  input: {schema: ScoreResumesInputSchema},
  output: {schema: ScoreResumesOutputSchema},
  prompt: `You are an expert recruiter specializing in scoring resumes based on job descriptions.\n\nYou will use this information to score the resumes, and provide a reason for the score. The score should be from 0 to 100.\n\nJob Description: {{{jobDescription}}}\n\nResumes:\n{{#each resumeDataUris}}\n  Resume: {{media url=this}}\n{{/each}}`,
});

const scoreResumesFlow = ai.defineFlow(
  {
    name: 'scoreResumesFlow',
    inputSchema: ScoreResumesInputSchema,
    outputSchema: ScoreResumesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
